{"version":3,"sources":["iitg1.jpg","ronaldo.jpeg","258872.jpg","lionel-messi.jpg","Components/Login.js","Components/Admin.js","Components/User.js","Config.js","App.js","serviceWorker.js","index.js"],"names":["module","exports","Content","styled","div","Button","button","Heading","p","Login","props","state","username","password","loggedIn","onChange","bind","handleSubmit","e","this","setState","target","name","value","preventDefault","submitForm","type","placeholder","onClick","Component","Wrapper","Image","img","Admin","handleLogout","src","iitg","alt","User","cr7","rooney","messi","DataBase","App","isLoggedIn","isAdmin","onSubmitForm","onLogout","console","log","found","find","alert","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","message"],"mappings":"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","file":"static/js/main.f63671ee.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/iitg1.ed68be50.jpg\";","module.exports = __webpack_public_path__ + \"static/media/ronaldo.0610db91.jpeg\";","module.exports = __webpack_public_path__ + \"static/media/258872.d346ba5b.jpg\";","module.exports = __webpack_public_path__ + \"static/media/lionel-messi.ac4e7772.jpg\";","import React, { Component } from 'react';\r\nimport styled from \"styled-components\";\r\n\r\n\r\nconst Content = styled.div`\r\n  display: flex;\r\n  flex-direction: column;\r\n  align-items: center;\r\n  background-color: #FAFAD2;\r\n`;\r\n\r\n\r\nconst Button = styled.button`\r\n  margin: 20px;\r\n  color: red;\r\n  margin-left: 30px;\r\n`;\r\n\r\nconst Heading = styled.p`\r\n  color: red;\r\n  font-weight: bold;\r\n\r\n`;\r\n\r\n\r\nexport default class Login extends Component{\r\n  \r\n   constructor(props){\r\n    super(props)\r\n    \r\n    let loggedIn=false \r\n    this.state={\r\n\r\n      username: '',\r\n      password: '',\r\n      loggedIn\r\n\r\n\r\n   }\r\n\r\n     this.onChange = this.onChange.bind(this)\r\n     this.handleSubmit = this.handleSubmit.bind(this)\r\n   }\r\n\r\n   onChange(e){\r\n    this.setState({\r\n      [e.target.name]: e.target.value\r\n    })\r\n   }\r\n\r\n\r\n    handleSubmit(e){\r\n      e.preventDefault()\r\n      const { username, password } =this.state\r\n      this.props.submitForm({username, password});\r\n      \r\n    }\r\n    \r\n\r\n\r\n\r\n   render()  {\r\n         return(\r\n        <Content>\r\n        <Heading>Welcome to Login Page</Heading>\r\n             \r\n             <input type=\"text\" placeholder=\"username\" name=\"username\" value= {this.state.username} onChange= {this.onChange}/>\r\n             <br/>\r\n             <input type=\"password\" placeholder=\"password\" name=\"password\" value= {this.state.password} onChange= {this.onChange}/>\r\n             <br/>\r\n             <Button onClick={this.handleSubmit}>Submit</Button>\r\n\r\n        </Content>\r\n\r\n\r\n\r\n        )\r\n\r\n\r\n\r\n   }\r\n\r\n\r\n\r\n}","import React from 'react';\r\nimport iitg from '../iitg1.jpg';\r\nimport styled from \"styled-components\";\r\n\r\n\r\nconst Content = styled.div`\r\n  display: flex;\r\n  flex-direction: column;\r\n  align-items: center;\r\n  background-color: #FFB6C1;\r\n`;\r\n\r\nconst Wrapper = styled.div`\r\n  flex-direction: row;\r\n`;\r\n\r\nconst Heading = styled.p`\r\n  color: red;\r\n  margin-left: 550px;\r\n  font-weight: bold;\r\n`;\r\n\r\nconst Image = styled.img`\r\n  height: 50%;\r\n  width: 50%;\r\n  margin: 8px;\r\n`;\r\n\r\nconst Button = styled.button`\r\n  margin: 20px;\r\n  margin-left: 1400px;\r\n`;\r\n\r\n// make functional components\r\n\r\nconst Admin = (props) => {\r\n    const {username, handleLogout} = props;\r\n  return(\r\n\r\n      <Content>\r\n        <Wrapper>\r\n          <Heading>Welcome to the page, {username}.You are now logged in!!</Heading>\r\n          <Button onClick={handleLogout}>Logout</Button>\r\n        </Wrapper>\r\n\r\n        <Image src={iitg} alt=\"iitg\" />\r\n      </Content>\r\n\r\n\r\n    )\r\n  }\r\n\r\nexport default Admin;","import React, {Component} from 'react';\r\nimport { Link, Redirect } from 'react-router-dom'\r\nimport cr7 from '../ronaldo.jpeg';\r\nimport rooney from '../258872.jpg';\r\nimport messi from '../lionel-messi.jpg';\r\nimport styled from \"styled-components\";\r\n\r\n\r\nconst Content = styled.div`\r\n  display: flex;\r\n  flex-direction: column;\r\n  align-items: center;\r\n  background-color: #7FFFD4;\r\n`;\r\n\r\nconst Wrapper = styled.div`\r\n  flex-direction: row;\r\n`;\r\n\r\nconst Heading = styled.p`\r\n  color: red;\r\n  margin-left: 550px;\r\n  font-weight: bold;\r\n`;\r\n\r\nconst Image = styled.img`\r\n  height: 20%;\r\n  width: 20%;\r\n  margin: 8px;\r\n`;\r\n\r\nconst Button = styled.button`\r\n  margin: 20px;\r\n  margin-left: 1400px;\r\n  color: blue;\r\n`;\r\n\r\n\r\n\r\nconst User = (props) => {\r\n\r\n\r\n    const {username, handleLogout} = props;\r\n    return(\r\n\r\n      <Content>\r\n        <Wrapper>\r\n          <Heading>Welcome to the page, {username}.You are now logged in!!</Heading>\r\n          <Button onClick={handleLogout}>Logout</Button>\r\n        </Wrapper>\r\n\r\n        <Image src={cr7} alt=\"ronaldo\" />\r\n        <Image src={rooney} alt=\"rooney\" />\r\n        <Image src={messi} alt=\"lionel messi\" /> \r\n\r\n      </Content>\r\n\r\n\r\n    )\r\n\r\n  }\r\n  export default User;\r\n","const DataBase = [{\r\n  username: \"Ashish\",\r\n  password: \"ashish\"\r\n}, {\r\n  username: \"Admin\",\r\n  password: \"admin\"\r\n}]\r\n\r\nexport { DataBase };\r\n","import React, {Component, Fragment} from 'react';\nimport { Link, Switch, Route } from 'react-router-dom'\nimport Login from './Components/Login'\nimport Admin from './Components/Admin'\nimport User from './Components/User'\nimport { DataBase } from './Config';\n\nclass App extends Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      isLoggedIn: false,\n      isAdmin: false,\n      username: \"\"\n    }\n    this.onSubmitForm = this.onSubmitForm.bind(this);\n    this.onLogout = this.onLogout.bind(this);\n\n  }\n\n  onSubmitForm({username, password}) {\n    console.log(username + \"\\n\" + password);\n    const found = DataBase.find((e) => e.username === username);\n    \n    //code logic\n    if (found) {\n      console.log(password);\n      console.log(found.password);\n      if (found.password === password) {\n        if (username === \"Admin\") this.setState({isAdmin: true, isLoggedIn: true, username: username});\n        else this.setState({isLoggedIn: true, username: username})\n      } else {\n        // password did not match\n         alert(\"Wrong Credentials\")\n      }\n    } else {\n      // user not found\n         alert(\"User Not found\")\n    }\n  }\n\n  onLogout() {\n    this.setState({isLoggedIn: false, isAdmin: false, username: \"\"});\n  }\n\n  render() {\n    if (!this.state.isLoggedIn) {\n      return (\n        <Login submitForm={this.onSubmitForm}/>\n      );\n    }\n    else {\n      if (this.state.isAdmin) {\n        return (\n          <Admin handleLogout={this.onLogout} username={this.state.username}/>\n        );\n      } else {\n        return (\n          <User handleLogout={this.onLogout} username={this.state.username}/>\n        );\n      }\n    }\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\nimport { BrowserRouter } from 'react-router-dom';\n\n\n\n\n\n\nReactDOM.render(\n<BrowserRouter>\n  \n    <App />\n</BrowserRouter>,  \n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}